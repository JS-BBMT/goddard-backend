/*
 * Goddard iPaaS Schools API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.SchoolsWebApiClient.Client;
using FranchiseePortal.SchoolsWebApiClient.Model;

namespace FranchiseePortal.SchoolsWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>School</returns>
        School ApiV1SchoolsFmsIdIdGet(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of School</returns>
        ApiResponse<School> ApiV1SchoolsFmsIdIdGetWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <returns>SchoolPagination</returns>
        SchoolPagination ApiV1SchoolsGet(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <returns>ApiResponse of SchoolPagination</returns>
        ApiResponse<SchoolPagination> ApiV1SchoolsGetWithHttpInfo(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;SchoolCareer&gt;</returns>
        List<SchoolCareer> ApiV1SchoolsIdCareersGet(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;SchoolCareer&gt;</returns>
        ApiResponse<List<SchoolCareer>> ApiV1SchoolsIdCareersGetWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ApiV1SchoolsIdClearFeaturesCachePost(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SchoolsIdClearFeaturesCachePostWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>School</returns>
        School ApiV1SchoolsIdGet(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of School</returns>
        ApiResponse<School> ApiV1SchoolsIdGetWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <returns>List&lt;SchoolSocialMediaFeed&gt;</returns>
        List<SchoolSocialMediaFeed> ApiV1SchoolsIdSocialMediaGet(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;SchoolSocialMediaFeed&gt;</returns>
        ApiResponse<List<SchoolSocialMediaFeed>> ApiV1SchoolsIdSocialMediaGetWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;SummerCamp&gt;</returns>
        List<SummerCamp> ApiV1SchoolsIdSummerCampsGet(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;SummerCamp&gt;</returns>
        ApiResponse<List<SummerCamp>> ApiV1SchoolsIdSummerCampsGetWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <returns>School</returns>
        School ApiV1SchoolsSchoolNumberSchoolNumberGet(string schoolNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <returns>ApiResponse of School</returns>
        ApiResponse<School> ApiV1SchoolsSchoolNumberSchoolNumberGetWithHttpInfo(string schoolNumber);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        System.Threading.Tasks.Task<School> ApiV1SchoolsFmsIdIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        System.Threading.Tasks.Task<ApiResponse<School>> ApiV1SchoolsFmsIdIdGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolPagination</returns>
        System.Threading.Tasks.Task<SchoolPagination> ApiV1SchoolsGetAsync(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolPagination)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolPagination>> ApiV1SchoolsGetWithHttpInfoAsync(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SchoolCareer&gt;</returns>
        System.Threading.Tasks.Task<List<SchoolCareer>> ApiV1SchoolsIdCareersGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SchoolCareer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SchoolCareer>>> ApiV1SchoolsIdCareersGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SchoolsIdClearFeaturesCachePostAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SchoolsIdClearFeaturesCachePostWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        System.Threading.Tasks.Task<School> ApiV1SchoolsIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        System.Threading.Tasks.Task<ApiResponse<School>> ApiV1SchoolsIdGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SchoolSocialMediaFeed&gt;</returns>
        System.Threading.Tasks.Task<List<SchoolSocialMediaFeed>> ApiV1SchoolsIdSocialMediaGetAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SchoolSocialMediaFeed&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SchoolSocialMediaFeed>>> ApiV1SchoolsIdSocialMediaGetWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SummerCamp&gt;</returns>
        System.Threading.Tasks.Task<List<SummerCamp>> ApiV1SchoolsIdSummerCampsGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SummerCamp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummerCamp>>> ApiV1SchoolsIdSummerCampsGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        System.Threading.Tasks.Task<School> ApiV1SchoolsSchoolNumberSchoolNumberGetAsync(string schoolNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        System.Threading.Tasks.Task<ApiResponse<School>> ApiV1SchoolsSchoolNumberSchoolNumberGetWithHttpInfoAsync(string schoolNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApi : ISchoolsApiSync, ISchoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchoolsApi : ISchoolsApi
    {
        private FranchiseePortal.SchoolsWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsApi(String basePath)
        {
            this.Configuration = FranchiseePortal.SchoolsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.SchoolsWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.SchoolsWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.SchoolsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.SchoolsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.SchoolsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchoolsApi(FranchiseePortal.SchoolsWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.SchoolsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.SchoolsWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.SchoolsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.SchoolsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.SchoolsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchoolsApi(FranchiseePortal.SchoolsWebApiClient.Client.ISynchronousClient client, FranchiseePortal.SchoolsWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.SchoolsWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.SchoolsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.SchoolsWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.SchoolsWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.SchoolsWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.SchoolsWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>School</returns>
        public School ApiV1SchoolsFmsIdIdGet(string id)
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> localVarResponse = ApiV1SchoolsFmsIdIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of School</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> ApiV1SchoolsFmsIdIdGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsFmsIdIdGet");

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<School>("/api/v1/schools/fms_id_{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsFmsIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        public async System.Threading.Tasks.Task<School> ApiV1SchoolsFmsIdIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> localVarResponse = await ApiV1SchoolsFmsIdIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School>> ApiV1SchoolsFmsIdIdGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsFmsIdIdGet");


            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<School>("/api/v1/schools/fms_id_{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsFmsIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <returns>SchoolPagination</returns>
        public SchoolPagination ApiV1SchoolsGet(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<SchoolPagination> localVarResponse = ApiV1SchoolsGetWithHttpInfo(lat, lng, showOnPublicWebsite);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <returns>ApiResponse of SchoolPagination</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<SchoolPagination> ApiV1SchoolsGetWithHttpInfo(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (lat != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            }
            if (lng != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            }
            if (showOnPublicWebsite != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "showOnPublicWebsite", showOnPublicWebsite));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SchoolPagination>("/api/v1/schools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolPagination</returns>
        public async System.Threading.Tasks.Task<SchoolPagination> ApiV1SchoolsGetAsync(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<SchoolPagination> localVarResponse = await ApiV1SchoolsGetWithHttpInfoAsync(lat, lng, showOnPublicWebsite, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"> (optional)</param>
        /// <param name="lng"> (optional)</param>
        /// <param name="showOnPublicWebsite"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolPagination)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<SchoolPagination>> ApiV1SchoolsGetWithHttpInfoAsync(double? lat = default(double?), double? lng = default(double?), bool? showOnPublicWebsite = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (lat != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            }
            if (lng != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            }
            if (showOnPublicWebsite != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "showOnPublicWebsite", showOnPublicWebsite));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchoolPagination>("/api/v1/schools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;SchoolCareer&gt;</returns>
        public List<SchoolCareer> ApiV1SchoolsIdCareersGet(string id)
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolCareer>> localVarResponse = ApiV1SchoolsIdCareersGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;SchoolCareer&gt;</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolCareer>> ApiV1SchoolsIdCareersGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdCareersGet");

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SchoolCareer>>("/api/v1/schools/{id}/careers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdCareersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SchoolCareer&gt;</returns>
        public async System.Threading.Tasks.Task<List<SchoolCareer>> ApiV1SchoolsIdCareersGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolCareer>> localVarResponse = await ApiV1SchoolsIdCareersGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SchoolCareer&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolCareer>>> ApiV1SchoolsIdCareersGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdCareersGet");


            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SchoolCareer>>("/api/v1/schools/{id}/careers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdCareersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ApiV1SchoolsIdClearFeaturesCachePost(string id)
        {
            ApiV1SchoolsIdClearFeaturesCachePostWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<Object> ApiV1SchoolsIdClearFeaturesCachePostWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdClearFeaturesCachePost");

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/schools/{id}/clear-features-cache", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdClearFeaturesCachePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SchoolsIdClearFeaturesCachePostAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1SchoolsIdClearFeaturesCachePostWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<Object>> ApiV1SchoolsIdClearFeaturesCachePostWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdClearFeaturesCachePost");


            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/schools/{id}/clear-features-cache", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdClearFeaturesCachePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>School</returns>
        public School ApiV1SchoolsIdGet(string id)
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> localVarResponse = ApiV1SchoolsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of School</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> ApiV1SchoolsIdGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdGet");

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<School>("/api/v1/schools/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        public async System.Threading.Tasks.Task<School> ApiV1SchoolsIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> localVarResponse = await ApiV1SchoolsIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School>> ApiV1SchoolsIdGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdGet");


            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<School>("/api/v1/schools/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <returns>List&lt;SchoolSocialMediaFeed&gt;</returns>
        public List<SchoolSocialMediaFeed> ApiV1SchoolsIdSocialMediaGet(string id, int? limit = default(int?))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolSocialMediaFeed>> localVarResponse = ApiV1SchoolsIdSocialMediaGetWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;SchoolSocialMediaFeed&gt;</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolSocialMediaFeed>> ApiV1SchoolsIdSocialMediaGetWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdSocialMediaGet");

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SchoolSocialMediaFeed>>("/api/v1/schools/{id}/social-media", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdSocialMediaGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SchoolSocialMediaFeed&gt;</returns>
        public async System.Threading.Tasks.Task<List<SchoolSocialMediaFeed>> ApiV1SchoolsIdSocialMediaGetAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolSocialMediaFeed>> localVarResponse = await ApiV1SchoolsIdSocialMediaGetWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SchoolSocialMediaFeed&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SchoolSocialMediaFeed>>> ApiV1SchoolsIdSocialMediaGetWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdSocialMediaGet");


            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SchoolSocialMediaFeed>>("/api/v1/schools/{id}/social-media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdSocialMediaGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;SummerCamp&gt;</returns>
        public List<SummerCamp> ApiV1SchoolsIdSummerCampsGet(string id)
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SummerCamp>> localVarResponse = ApiV1SchoolsIdSummerCampsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;SummerCamp&gt;</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SummerCamp>> ApiV1SchoolsIdSummerCampsGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdSummerCampsGet");

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SummerCamp>>("/api/v1/schools/{id}/summer-camps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdSummerCampsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SummerCamp&gt;</returns>
        public async System.Threading.Tasks.Task<List<SummerCamp>> ApiV1SchoolsIdSummerCampsGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SummerCamp>> localVarResponse = await ApiV1SchoolsIdSummerCampsGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SummerCamp&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<List<SummerCamp>>> ApiV1SchoolsIdSummerCampsGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->ApiV1SchoolsIdSummerCampsGet");


            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SummerCamp>>("/api/v1/schools/{id}/summer-camps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsIdSummerCampsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <returns>School</returns>
        public School ApiV1SchoolsSchoolNumberSchoolNumberGet(string schoolNumber)
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> localVarResponse = ApiV1SchoolsSchoolNumberSchoolNumberGetWithHttpInfo(schoolNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <returns>ApiResponse of School</returns>
        public FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> ApiV1SchoolsSchoolNumberSchoolNumberGetWithHttpInfo(string schoolNumber)
        {
            // verify the required parameter 'schoolNumber' is set
            if (schoolNumber == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolNumber' when calling SchoolsApi->ApiV1SchoolsSchoolNumberSchoolNumberGet");

            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolNumber", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(schoolNumber)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<School>("/api/v1/schools/school_number_{schoolNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolNumberSchoolNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        public async System.Threading.Tasks.Task<School> ApiV1SchoolsSchoolNumberSchoolNumberGetAsync(string schoolNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School> localVarResponse = await ApiV1SchoolsSchoolNumberSchoolNumberGetWithHttpInfoAsync(schoolNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolsWebApiClient.Client.ApiResponse<School>> ApiV1SchoolsSchoolNumberSchoolNumberGetWithHttpInfoAsync(string schoolNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolNumber' is set
            if (schoolNumber == null)
                throw new FranchiseePortal.SchoolsWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolNumber' when calling SchoolsApi->ApiV1SchoolsSchoolNumberSchoolNumberGet");


            FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolNumber", FranchiseePortal.SchoolsWebApiClient.Client.ClientUtils.ParameterToString(schoolNumber)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<School>("/api/v1/schools/school_number_{schoolNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolNumberSchoolNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
